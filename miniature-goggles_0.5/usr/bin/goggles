#!/usr/bin/env bash

function usage {
    echo "usage: goggles [-hs] [-f ps format] [-o outfile] [-i interval] ([-c command] OR command)"
    echo "	-h help		display help"
    echo "	-s silent	command will not output to stdout"
    echo "	-f format	specify ps format for goggles output"
    echo "	-o outfile	specify output file"
    echo "	-i interval	specify interval in seconds"
    echo "	-c command	specify command (defaults to last argument)"
    exit 1
}

# Defaults
for lastArg; do true; done # Get last argument.
command=$lastArg
format='vsz,rss,etimes'
interval=1
verbose=FALSE
silent=FALSE
outfile=""

# Parse options
while getopts ":c:vso:f:i:h" opt; do
  case $opt in
    c)
      command=$OPTARG
      ;;
    v)
      verbose=TRUE
      ;;
    s)
      silent=TRUE
      ;;
    o)
      outfile="$OPTARG"
      ;;
    f)
      format=$OPTARG
      ;;
    i)
      interval=$OPTARG
      ;;
    h)
      usage
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      exit 1
  esac
done

# Run the command and save the PID to a variable.
commandPID=''
if [ $silent == 'FALSE' ]; then
    eval "(${command}) < /dev/stdin &"
else
    eval "(${command}) > /dev/null &"
fi
commandPID=$!
trap "kill ${commandPID} 2> /dev/null" EXIT # If this script is killed, kill the command.

if [ -z "$outfile" ]; then
    top -p ${commandPID} -n 1 -b | tail -fn 1 | awk '{printf "%s %s\n",$1,$12}'
else
    `top -p ${commandPID} -n 1 -b | tail -fn 1 | awk '{printf "%s %s\n",$1,$12}' > $outfile`
fi

count=0
while kill -0 ${commandPID} 2> /dev/null; do # Monitor loop while proc is running.
    if [[ $count == 0 ]]; then
        if [ -z "$outfile" ]; then
            eval "ps -o $format ${commandPID}"
        else
            eval "ps -o $format ${commandPID} >> $outfile"
        fi
    else
        if [ -z "$outfile" ]; then
            eval "ps -o $format --no-headers ${commandPID}"
        else
            eval "ps -o $format --no-headers ${commandPID} >> $outfile"
        fi
    fi
    sleep $interval
    ((count++))
done
