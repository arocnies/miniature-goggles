#!/usr/bin/env bash

function usage {
    echo "usage: goggles [-hs] [-f ps format] [-o outfile] [-i interval] ([-c command] OR command)"
    echo "	-h help		display help"
    echo "	-s silent	command will not output to stdout"
    echo "	-f format	specify ps format for goggles output"
    echo "	-o outfile	specify output file"
    echo "	-i interval	specify interval in seconds"
    echo "	-c command	specify command (defaults to last argument)"
    exit 1
}

# Defaults
for lastArg; do true; done # Get last argument.
COMMAND=$lastArg
FORMAT='vsz,rss,etimes'
INTERVAL=1
VERBOSE=FALSE
SILENT=FALSE
OUTPUT=""

# Parse options
while getopts ":c:vso:f:i:h" opt; do
  case $opt in
    c)
      COMMAND=$OPTARG
      ;;
    v)
      VERBOSE=TRUE
      ;;
    s)
      SILENT=TRUE
      ;;
    o)
      OUTPUT="$OPTARG"
      ;;
    f)
      FORMAT=$OPTARG
      ;;
    i)
      INTERVAL=$OPTARG
      ;;
    h)
      usage
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      exit 1
  esac
done

# Run the command and save the PID to a variable.
CMD_PID=''
if [ $SILENT == 'FALSE' ]; then
    eval "(${COMMAND}) < /dev/stdin &"
else
    eval "(${COMMAND}) > /dev/null &"
fi
CMD_PID=$!

trap "kill ${CMD_PID} 2> /dev/null" EXIT # If this script is killed, kill the command.
if [ -z "$OUTPUT" ]; then
    top -p ${CMD_PID} -n 1 -b | tail -fn 1 | awk '{printf "%s %s\n",$1,$12}'
else
    `top -p ${CMD_PID} -n 1 -b | tail -fn 1 | awk '{printf "%s %s\n",$1,$12}' > $OUTPUT`
fi

COUNT=0
while kill -0 ${CMD_PID} 2> /dev/null; do # Monitor loop while proc is running.
    if [[ $COUNT == 0 ]]; then
        if [ -z "$OUTPUT" ]; then
            eval "ps -o $FORMAT ${CMD_PID}"
        else
            eval "ps -o $FORMAT ${CMD_PID} >> $OUTPUT"
        fi
    else
        if [ -z "$OUTPUT" ]; then
            eval "ps -o $FORMAT --no-headers ${CMD_PID}"
        else
            eval "ps -o $FORMAT --no-headers ${CMD_PID} >> $OUTPUT"
        fi
    fi
    sleep $INTERVAL
    ((COUNT++))
done
